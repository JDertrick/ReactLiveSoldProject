Prompt 2: Tarea para Desarrollador Frontend (React)

Contexto del Proyecto

Eres un desarrollador de frontend senior especializado en React, TypeScript y Tailwind CSS. Tu tarea es diseñar y maquetar las pantallas principales para una plataforma SaaS "Multi-Tenant" de gestión de inventario y ventas.

La aplicación es una SPA (Single Page Application) que se comunica con una API de .NET. La API maneja la lógica de negocio y la seguridad basada en roles (SuperAdmin, OrgOwner, Seller) y un Portal de Cliente separado.

Novedad Arquitectónica (Portal de Cliente):

El portal del cliente debe funcionar con rutas dinámicas por organización (ej: /portal/tienda-de-juan/login). El frontend es responsable de leer esta ruta, buscar la marca (logo) y gestionar el estado del portal.

Requerimientos Clave

Tecnología: React 18+, TypeScript, Tailwind CSS.

Enrutamiento (Routing): Usa react-router-dom. La app debe soportar rutas dinámicas por organización, ej: /portal/:orgSlug/login y /portal/:orgSlug/dashboard.

Estado: Usa React Context o Zustand para el estado global. Necesitarás gestionar:

Estado de Autenticación: (Datos del usuario logueado, JWT).

Estado de Marca del Portal: (Los datos públicos de la organización: name, logo_url).

Estilo: Diseño profesional, limpio, minimalista y totalmente responsive (mobile-first).

Componentes: Usa componentes funcionales con Hooks.

API: Prepara "hooks" de API (ej: usando react-query o swr) para consumir los endpoints de la API backend (ej: useGetProducts(), useCreateCustomer()).

Lista de Pantallas a Diseñar y Maquetar

A. Flujo de Autenticación (Público)

Pantalla de Login de Empleados (Vendedores/Admins):

Ruta: /login (Ruta simple, no es específica de una organización).

Campos: Email, Password.

Llama a POST /api/auth/employee-login.

Redirige a /superadmin o /app según el rol.

Pantalla de Login de Clientes (¡MODIFICADA!):

Ruta: /portal/:orgSlug/login

Lógica de Carga:

La página debe leer el parámetro :orgSlug de la URL (ej: "tienda-de-juan").

Debe llamar al endpoint público: GET /api/public/organization-by-slug/{orgSlug}.

Debe guardar el name y logo_url recibidos en el estado global "Estado de Marca del Portal".

La página debe mostrar dinámicamente el logo y nombre de la organización. Si el orgSlug es inválido, muestra un error 404.

Lógica de Login:

Campos: Email, Password.

Al enviar, debe llamar a POST /api/portal/login enviando: { email, password, organizationSlug: orgSlug }.

Almacena el JWT de Cliente y redirige a /portal/:orgSlug/dashboard.

B. Panel de Super Administrador (Rol: SuperAdmin)

Ruta base: /superadmin

Dashboard:

Resumen simple (ej: "X Organizaciones Activas").

Gestión de Organizaciones:

Tabla de Organizations.

Columnas: Nombre, Email de Contacto, Plan, Estado (Activa/Inactiva).

Acciones: Botones para "Crear Nueva", "Editar", "Activar/Desactivar".

Modal/Formulario para crear/editar una Organization.

C. Panel de Tienda (Roles: OrgOwner, Seller)

Ruta base: /app

Dashboard de Tienda:

Resumen de ventas del día, clientes con más saldo, etc. (Datos filtrados por su OrganizationId).

Gestión de Clientes (Customers):

Tabla de clientes de la organización.

Columnas: Nombre, Email, Teléfono, Saldo de Billetera.

Acciones: "Crear Cliente", "Editar", "Ver Detalles".

Detalle de Cliente (Modal o Página):

Pestaña 1 (Perfil): Ver/Editar datos del cliente (FirstName, LastName, Email, Notes).

Pestaña 2 (Billetera):

Muestra el Wallet.Balance actual.

Formulario simple para "Agregar Fondos" (llama a POST /api/wallets/deposit). Campos: Monto, Notas de la transacción.

Historial de WalletTransactions (depósitos y gastos).

Pestaña 3 (Historial de Compras): Lista de SalesOrders del cliente.

Gestión de Inventario (Products):

Vista de cuadrícula o tabla de Products.

Acciones: "Crear Producto", "Editar".

Formulario de Producto (Modal o Página):

Campos para Product (Nombre, Descripción, Tipo).

Sección para ProductVariants:

Si el tipo es "simple", un solo formulario (SKU, Precio, Stock).

Si el tipo es "variable", una lista dinámica para agregar múltiples variantes (ej: Atributos: { "talla": "M", "color": "Rojo" }, SKU, Precio, Stock).

Pantalla de Venta LIVE (¡La más importante!):

Layout de dos o tres columnas.

Columna 1: Selector de Customer (buscador rápido de clientes de la organización).

Columna 2: Detalles de la SalesOrder activa ('draft').

Muestra el Customer seleccionado y su Wallet.Balance.

Lista de SalesOrderItems en el carrito.

Muestra el SalesOrder.TotalAmount.

Columna 3: Buscador de Inventario.

Input para buscar ProductVariants por SKU o nombre.

Al seleccionar un producto, pide quantity y unitPrice (permitiendo editar el precio de lista).

Botón "Agregar al Carrito".

Botón principal (grande y claro): "FINALIZAR VENTA" (llama a POST /api/salesorders/{id}/finalize).

Gestión de Equipo (Solo para OrgOwner):

Tabla de OrganizationMembers (los Users de su tienda).

Acciones: "Invitar Usuario" (por email), "Cambiar Rol", "Eliminar".

D. Portal del Cliente (Rol: Customer)

Ruta base: /portal

Dashboard Simple:

Muestra su nombre y su Wallet.Balance actual.

Historial de Compras:

Lista de sus SalesOrders (solo las 'completed').

Al hacer clic, muestra un detalle simple de la orden (qué compró y a qué precio).