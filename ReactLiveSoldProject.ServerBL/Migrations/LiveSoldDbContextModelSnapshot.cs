// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ReactLiveSoldProject.ServerBL.Base;

#nullable disable

namespace ReactLiveSoldProject.ServerBL.Migrations
{
    [DbContext(typeof(LiveSoldDbContext))]
    partial class LiveSoldDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Audit.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action_type");

                    b.Property<string>("Changes")
                        .HasColumnType("jsonb")
                        .HasColumnName("changes");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<Guid?>("TargetRecordId")
                        .HasColumnType("uuid")
                        .HasColumnName("target_record_id");

                    b.Property<string>("TargetTable")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("target_table");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.HasIndex("TargetTable", "TargetRecordId");

                    b.ToTable("AuditLog", (string)null);
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Authentication.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("logo_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("PlanType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Standard")
                        .HasColumnName("plan_type");

                    b.Property<string>("PrimaryContactEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("primary_contact_email");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("slug");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Organizations", (string)null);
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Authentication.OrganizationMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Seller")
                        .HasColumnName("role");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("OrganizationId", "UserId")
                        .IsUnique();

                    b.ToTable("OrganizationMembers", (string)null);
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Authentication.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsSuperAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_super_admin");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.CustomerWallet.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("AssignedSellerId")
                        .HasColumnType("uuid")
                        .HasColumnName("assigned_seller_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.HasKey("Id");

                    b.HasIndex("AssignedSellerId");

                    b.HasIndex("OrganizationId", "Email")
                        .IsUnique();

                    b.HasIndex("OrganizationId", "Phone")
                        .IsUnique()
                        .HasFilter("\"phone\" IS NOT NULL");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.CustomerWallet.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0.00m)
                        .HasColumnName("balance");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("OrganizationId");

                    b.ToTable("Wallets", (string)null);
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.CustomerWallet.WalletTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<Guid?>("AuthorizedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("authorized_by_user_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<Guid?>("RelatedSalesOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("related_sales_order_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid")
                        .HasColumnName("wallet_id");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizedByUserId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RelatedSalesOrderId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransactions", (string)null);
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Inventory.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_published");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Simple")
                        .HasColumnName("product_type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Inventory.ProductTag", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags", (string)null);
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Inventory.ProductVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Attributes")
                        .HasColumnType("jsonb")
                        .HasColumnName("attributes");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0.00m)
                        .HasColumnName("price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("Sku")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sku");

                    b.Property<int>("StockQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("stock_quantity");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("OrganizationId", "Sku")
                        .IsUnique()
                        .HasFilter("\"sku\" IS NOT NULL");

                    b.ToTable("ProductVariants", (string)null);
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Inventory.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId", "Name")
                        .IsUnique();

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Sales.SalesOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_user_id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("notes");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Draft")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0.00m)
                        .HasColumnName("total_amount");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(now() at time zone 'utc')");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("SalesOrders", (string)null);
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Sales.SalesOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ItemDescription")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("item_description");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("original_price");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_variant_id");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("quantity");

                    b.Property<Guid>("SalesOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sales_order_id");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("unit_price");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesOrderItems", (string)null);
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Audit.AuditLog", b =>
                {
                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.Authentication.Organization", "Organization")
                        .WithMany("AuditLogs")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.Authentication.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Authentication.OrganizationMember", b =>
                {
                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.Authentication.Organization", "Organization")
                        .WithMany("Members")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.Authentication.User", "User")
                        .WithMany("OrganizationLinks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.CustomerWallet.Customer", b =>
                {
                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.Authentication.User", "AssignedSeller")
                        .WithMany("AssignedCustomers")
                        .HasForeignKey("AssignedSellerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.Authentication.Organization", "Organization")
                        .WithMany("Customers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedSeller");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.CustomerWallet.Wallet", b =>
                {
                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.CustomerWallet.Customer", "Customer")
                        .WithOne("Wallet")
                        .HasForeignKey("ReactLiveSoldProject.ServerBL.Models.CustomerWallet.Wallet", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.Authentication.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.CustomerWallet.WalletTransaction", b =>
                {
                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.Authentication.User", "AuthorizedByUser")
                        .WithMany("AuthorizedTransactions")
                        .HasForeignKey("AuthorizedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.Authentication.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.Sales.SalesOrder", "RelatedSalesOrder")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("RelatedSalesOrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.CustomerWallet.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AuthorizedByUser");

                    b.Navigation("Organization");

                    b.Navigation("RelatedSalesOrder");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Inventory.Product", b =>
                {
                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.Authentication.Organization", "Organization")
                        .WithMany("Products")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Inventory.ProductTag", b =>
                {
                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.Inventory.Product", "Product")
                        .WithMany("TagLinks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.Inventory.Tag", "Tag")
                        .WithMany("ProductLinks")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Inventory.ProductVariant", b =>
                {
                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.Authentication.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.Inventory.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Inventory.Tag", b =>
                {
                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.Authentication.Organization", "Organization")
                        .WithMany("Tags")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Sales.SalesOrder", b =>
                {
                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.Authentication.User", "CreatedByUser")
                        .WithMany("CreatedSalesOrders")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.CustomerWallet.Customer", "Customer")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.Authentication.Organization", "Organization")
                        .WithMany("SalesOrders")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Customer");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Sales.SalesOrderItem", b =>
                {
                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.Authentication.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.Inventory.ProductVariant", "ProductVariant")
                        .WithMany("SalesOrderItems")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ReactLiveSoldProject.ServerBL.Models.Sales.SalesOrder", "SalesOrder")
                        .WithMany("Items")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("ProductVariant");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Authentication.Organization", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Customers");

                    b.Navigation("Members");

                    b.Navigation("Products");

                    b.Navigation("SalesOrders");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Authentication.User", b =>
                {
                    b.Navigation("AssignedCustomers");

                    b.Navigation("AuditLogs");

                    b.Navigation("AuthorizedTransactions");

                    b.Navigation("CreatedSalesOrders");

                    b.Navigation("OrganizationLinks");
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.CustomerWallet.Customer", b =>
                {
                    b.Navigation("SalesOrders");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.CustomerWallet.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Inventory.Product", b =>
                {
                    b.Navigation("TagLinks");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Inventory.ProductVariant", b =>
                {
                    b.Navigation("SalesOrderItems");
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Inventory.Tag", b =>
                {
                    b.Navigation("ProductLinks");
                });

            modelBuilder.Entity("ReactLiveSoldProject.ServerBL.Models.Sales.SalesOrder", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("WalletTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
